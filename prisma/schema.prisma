// This is  Prisma schema file
// Learn more: https://pris.ly/d/prisma-schema

generator client {
        provider = "prisma-client-js"
}

datasource db {
        provider = "postgresql"
        //   url      = env("DATABASE_URL")
        url      = "postgresql://medimandu-t_owner:npg_kXj1AdcF5zNQ@ep-wild-bush-a8g8vk33-pooler.eastus2.azure.neon.tech/medimandu-t?sslmode=require&channel_binding=require"
}

// ENUMS
enum UserRole {
        UNASSIGNED
        PATIENT
        DOCTOR
        ADMIN
}

enum VerificationStatus {
        PENDING
        VERIFIED
        REJECTED
}

enum SlotStatus {
        AVAILABLE
        BOOKED
        BLOCKED
}

enum AppointmentStatus {
        SCHEDULED
        COMPLETED
        CANCELLED
}

enum TransactionType {
        CREDIT_PURCHASE // Credits purchased through Clerk Billing
        APPOINTMENT_DEDUCTION // Credit used for appointment
        ADMIN_ADJUSTMENT // Manual adjustment by admin
}

enum PayoutStatus {
        PROCESSING
        PROCESSED
}

// MODELS

model User {
        id                 String              @id @default(uuid())
        clerkUserId        String              @unique // Clerk's user ID
        email              String              @unique
        name               String?
        imageUrl           String?
        role               UserRole            @default(UNASSIGNED)
        createdAt          DateTime            @default(now())
        updatedAt          DateTime            @updatedAt
        // Patient-specific
        credits            Int                 @default(2)
        // Doctor-specific
        specialty          String?
        experience         Int? // Years of experience
        credentialUrl      String? // Document URL
        description        String?             @db.Text
        verificationStatus VerificationStatus? @default(PENDING)

        // Relations
        patientAppointments Appointment[]       @relation("PatientAppointments")
        doctorAppointments  Appointment[]       @relation("DoctorAppointments")
        availabilities      Availability[]
        transactions        CreditTransaction[]
        payouts             Payout[]
}

model Availability {
        id        String     @id @default(uuid())
        doctorId  String
        doctor    User       @relation(fields: [doctorId], references: [id], onDelete: Cascade)
        startTime DateTime
        endTime   DateTime
        status    SlotStatus @default(AVAILABLE)

        @@index([doctorId, startTime])
}

model Appointment {
        id                 String            @id @default(uuid())
        patientId          String
        patient            User              @relation("PatientAppointments", fields: [patientId], references: [id])
        doctorId           String
        doctor             User              @relation("DoctorAppointments", fields: [doctorId], references: [id])
        startTime          DateTime
        endTime            DateTime
        status             AppointmentStatus @default(SCHEDULED)
        notes              String?           @db.Text
        patientDescription String?           @db.Text

        // Video session
        videoSessionId    String?
        videoSessionToken String?

        createdAt DateTime @default(now())
        updatedAt DateTime @updatedAt

        @@index([status, startTime])
        @@index([doctorId, startTime])
}

model CreditTransaction {
        id        String          @id @default(uuid())
        userId    String
        user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
        amount    Int // Positive for additions, negative for usage
        type      TransactionType
        packageId String? // Optional reference to pricing package
        createdAt DateTime        @default(now())
}

model Payout {
        id          String       @id @default(uuid())
        doctorId    String
        doctor      User         @relation(fields: [doctorId], references: [id], onDelete: Cascade)
        amount      Float // Total payout amount in USD
        credits     Int // Number of credits being paid out
        platformFee Float // Platform fee deducted (2 USD per credit)
        netAmount   Float // Amount doctor receives (8 USD per credit)
        paypalEmail String // Doctor's PayPal email for payout
        status      PayoutStatus @default(PROCESSING)
        createdAt   DateTime     @default(now())
        updatedAt   DateTime     @updatedAt
        processedAt DateTime? // When admin marked it as processed
        processedBy String? // Admin user ID or email who processed

        @@index([status, createdAt])
        @@index([doctorId, status])
}
